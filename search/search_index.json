{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Overview This project applies a very thin wrapper around Conftest to enable Policy-as-Code checks against ITSG-33 security requirements.","title":"Overview"},{"location":"#overview","text":"This project applies a very thin wrapper around Conftest to enable Policy-as-Code checks against ITSG-33 security requirements.","title":"Overview"},{"location":"config_connector/cp_9/sqlinstance/","text":"CP_9 SQLInstance Rego Policy 1 2 3 4 5 6 7 8 9 10 11 12 13 package config_connector.cp_9.sqlinstance deny_sqlinstance_backup_disabled [ msg ] { # There exists some `i` some i # Such that the `i`th resource is a SQLInstance manifest input [ i ] .contents.kind == \"SQLInstance\" # And it is not the case that its backup configuration is enabled not input [ i ] .contents.spec.settings.backupConfiguration.enabled == true # Error message with remediation msg = \"Backup is disabled. Remediation: set `spec.settings.backupConfiguration.enabled: true`\" } Test Cases 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 package config_connector.cp_9.sqlinstance # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if there are multiple SQLInstance resources present, and at least # one of them has backupConfiguration disabled. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : false }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # Expect deny if there are multiple SQLInstance resources present, and at least # one of them does not specify the full path to backupConfiguration. test_deny_if_any_sqlinstance_has_path_to_backup_unspecified { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : {}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if a non-SQLInstance resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"Bucket\" , }} , { \"contents\" : { \"kind\" : \"Notebook\" , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg } # Expect allow if **every** SQLInstance resource has backupConfiguration enabled. test_allow_if_every_sqlinstance_has_backup_enabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg }","title":"SQLInstance"},{"location":"config_connector/cp_9/sqlinstance/#cp_9-sqlinstance","text":"","title":"CP_9 SQLInstance"},{"location":"config_connector/cp_9/sqlinstance/#rego-policy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 package config_connector.cp_9.sqlinstance deny_sqlinstance_backup_disabled [ msg ] { # There exists some `i` some i # Such that the `i`th resource is a SQLInstance manifest input [ i ] .contents.kind == \"SQLInstance\" # And it is not the case that its backup configuration is enabled not input [ i ] .contents.spec.settings.backupConfiguration.enabled == true # Error message with remediation msg = \"Backup is disabled. Remediation: set `spec.settings.backupConfiguration.enabled: true`\" }","title":"Rego Policy"},{"location":"config_connector/cp_9/sqlinstance/#test-cases","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 package config_connector.cp_9.sqlinstance # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if there are multiple SQLInstance resources present, and at least # one of them has backupConfiguration disabled. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : false }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # Expect deny if there are multiple SQLInstance resources present, and at least # one of them does not specify the full path to backupConfiguration. test_deny_if_any_sqlinstance_has_path_to_backup_unspecified { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : {}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if a non-SQLInstance resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"Bucket\" , }} , { \"contents\" : { \"kind\" : \"Notebook\" , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg } # Expect allow if **every** SQLInstance resource has backupConfiguration enabled. test_allow_if_every_sqlinstance_has_backup_enabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"metadata\" : { \"name\" : \"sqlinstance\" } , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg }","title":"Test Cases"}]}