{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Overview This project applies a very thin wrapper around Conftest to enable Policy-as-Code checks against ITSG-33 security requirements. The use case for this project is to address itsg-33 compliance checking around project-specific cloud infrastructure , as shown in the dashed red box below.","title":"Overview"},{"location":"#overview","text":"This project applies a very thin wrapper around Conftest to enable Policy-as-Code checks against ITSG-33 security requirements. The use case for this project is to address itsg-33 compliance checking around project-specific cloud infrastructure , as shown in the dashed red box below.","title":"Overview"},{"location":"config_connector/ac_3_1/bucket/","text":"AC-3 (1) Bucket Description To comply with AC-3 (1) Access Enforcement , all storage buckets must have spec.publicAccessPrevention set to true . Rego Policy 1 2 3 4 5 6 7 8 9 10 11 12 13 package config_connector.ac_3_1.bucket deny_storagebucket_without_public_access_prevention [ msg ] { # There exists some `i` some i # Such that the `i`th resource is a StorageBucket manifest input [ i ] .contents.kind == \"StorageBucket\" # And it is not the case that public access prevention is enabled not input [ i ] .contents.spec.publicAccessPrevention == true # Error message with remediation msg = \"Public Access Prevension is not enabled. Remediation: set `spec.publicAccessPrevention: true`\" } Test Cases 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package config_connector.ac_3_1.bucket # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if there are multiple StorageBucket resources present, and at least # one of them has publicAccessPrevention disabled. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : false } , }} , ] count ( deny_storagebucket_without_public_access_prevention ) > 0 with input as cfg } # Expect deny if there are multiple StorageBucket resources present, and at least # one of them does not specify publicAccessPrevention. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : {} , }} , ] count ( deny_storagebucket_without_public_access_prevention ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if a non-StorageBucket resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , }} , { \"contents\" : { \"kind\" : \"Notebook\" , }} , ] count ( deny_storagebucket_without_public_access_prevention ) == 0 with input as cfg } # Expect allow if **every** StorageBucket resource has publicAccessPrevention enabled. test_allow_if_every_sqlinstance_has_backup_enabled { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , ] count ( deny_storagebucket_without_public_access_prevention ) == 0 with input as cfg }","title":"Bucket"},{"location":"config_connector/ac_3_1/bucket/#ac-3-1-bucket","text":"","title":"AC-3 (1) Bucket"},{"location":"config_connector/ac_3_1/bucket/#description","text":"To comply with AC-3 (1) Access Enforcement , all storage buckets must have spec.publicAccessPrevention set to true .","title":"Description"},{"location":"config_connector/ac_3_1/bucket/#rego-policy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 package config_connector.ac_3_1.bucket deny_storagebucket_without_public_access_prevention [ msg ] { # There exists some `i` some i # Such that the `i`th resource is a StorageBucket manifest input [ i ] .contents.kind == \"StorageBucket\" # And it is not the case that public access prevention is enabled not input [ i ] .contents.spec.publicAccessPrevention == true # Error message with remediation msg = \"Public Access Prevension is not enabled. Remediation: set `spec.publicAccessPrevention: true`\" }","title":"Rego Policy"},{"location":"config_connector/ac_3_1/bucket/#test-cases","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package config_connector.ac_3_1.bucket # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if there are multiple StorageBucket resources present, and at least # one of them has publicAccessPrevention disabled. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : false } , }} , ] count ( deny_storagebucket_without_public_access_prevention ) > 0 with input as cfg } # Expect deny if there are multiple StorageBucket resources present, and at least # one of them does not specify publicAccessPrevention. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : {} , }} , ] count ( deny_storagebucket_without_public_access_prevention ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if a non-StorageBucket resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , }} , { \"contents\" : { \"kind\" : \"Notebook\" , }} , ] count ( deny_storagebucket_without_public_access_prevention ) == 0 with input as cfg } # Expect allow if **every** StorageBucket resource has publicAccessPrevention enabled. test_allow_if_every_sqlinstance_has_backup_enabled { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"spec\" : { \"publicAccessPrevention\" : true } , }} , ] count ( deny_storagebucket_without_public_access_prevention ) == 0 with input as cfg }","title":"Test Cases"},{"location":"config_connector/ac_3_7/bucket/","text":"AC-3 (7) Bucket Description To comply with AC-3 (7) Access Enforcement , all storage buckets must have at least one associated access control policy. This policy makes no assumptions about the details of role bindings specified in each StorageBucketAccessControl resource, as this is a project-specific implementation detail. The purpose of this policy is to check that StorageBucketAccessControl wasn't entirely omitted from a StorageBucket resource in error. Rego Policy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package config_connector.ac_3_7.bucket deny_storage_bucket_without_access_control [ msg ] { # Define set of buckets buckets : = { bucket | input [ i ] .contents.kind == \"StorageBucket\" bucket : = input [ i ] .contents } # Define set of buckets that have a corresponding access control resource buckets_with_access_control : = { bucket | input [ i ] .contents.kind == \"StorageBucket\" input [ j ] .contents.kind == \"StorageBucketAccessControl\" input [ j ] .contents.spec.bucketRef.name == input [ i ] .contents.metadata.name bucket : = input [ i ] .contents } # If number of elements in each set is not the same, then there exists a # bucket without an associated access control resource. count ( buckets_with_access_control ) ! = count ( buckets ) msg : = \"Exists at least one bucket without StorageBucketAccessControl. Remediation: Create a StorageBucketAccessControl resource and set `spec.bucketRef.name` to the bucket name.\" } Test Cases 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 package config_connector.ac_3_7.bucket # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if any storage bucket doesn't have an associated # StorageBucketAccessControl resource attached to it. test_deny_if_any_bucket_without_access_control { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket2\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , ] count ( deny_storage_bucket_without_access_control ) > 0 with input as cfg } # Expect deny if any StorageBucketAccessControl resource exists but # doesn't specify a bucket attached to it. test_deny_if_bucket_access_policy_exists_but_does_not_ref_bucket { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : {} , }} , ] count ( deny_storage_bucket_without_access_control ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if no StorageBucket resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" }} , { \"contents\" : { \"kind\" : \"Notebook\" }} , ] count ( deny_storage_bucket_without_access_control ) == 0 with input as cfg } # Expect allow if **every** StorageBucket resource has an accompanying # StorageBucketAccessControl resource attached to it. test_allow_if_every_bucket_has_access_control { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket2\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket2\" }} , }} , ] count ( deny_storage_bucket_without_access_control ) == 0 with input as cfg } # Expect allow if there is more than one StorageBucketAccessControl policy for # a single bucket test_allow_if_one_bucket_has_many_access_control_policies { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , ] count ( deny_storage_bucket_without_access_control ) == 0 with input as cfg }","title":"Bucket"},{"location":"config_connector/ac_3_7/bucket/#ac-3-7-bucket","text":"","title":"AC-3 (7) Bucket"},{"location":"config_connector/ac_3_7/bucket/#description","text":"To comply with AC-3 (7) Access Enforcement , all storage buckets must have at least one associated access control policy. This policy makes no assumptions about the details of role bindings specified in each StorageBucketAccessControl resource, as this is a project-specific implementation detail. The purpose of this policy is to check that StorageBucketAccessControl wasn't entirely omitted from a StorageBucket resource in error.","title":"Description"},{"location":"config_connector/ac_3_7/bucket/#rego-policy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package config_connector.ac_3_7.bucket deny_storage_bucket_without_access_control [ msg ] { # Define set of buckets buckets : = { bucket | input [ i ] .contents.kind == \"StorageBucket\" bucket : = input [ i ] .contents } # Define set of buckets that have a corresponding access control resource buckets_with_access_control : = { bucket | input [ i ] .contents.kind == \"StorageBucket\" input [ j ] .contents.kind == \"StorageBucketAccessControl\" input [ j ] .contents.spec.bucketRef.name == input [ i ] .contents.metadata.name bucket : = input [ i ] .contents } # If number of elements in each set is not the same, then there exists a # bucket without an associated access control resource. count ( buckets_with_access_control ) ! = count ( buckets ) msg : = \"Exists at least one bucket without StorageBucketAccessControl. Remediation: Create a StorageBucketAccessControl resource and set `spec.bucketRef.name` to the bucket name.\" }","title":"Rego Policy"},{"location":"config_connector/ac_3_7/bucket/#test-cases","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 package config_connector.ac_3_7.bucket # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if any storage bucket doesn't have an associated # StorageBucketAccessControl resource attached to it. test_deny_if_any_bucket_without_access_control { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket2\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , ] count ( deny_storage_bucket_without_access_control ) > 0 with input as cfg } # Expect deny if any StorageBucketAccessControl resource exists but # doesn't specify a bucket attached to it. test_deny_if_bucket_access_policy_exists_but_does_not_ref_bucket { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : {} , }} , ] count ( deny_storage_bucket_without_access_control ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if no StorageBucket resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" }} , { \"contents\" : { \"kind\" : \"Notebook\" }} , ] count ( deny_storage_bucket_without_access_control ) == 0 with input as cfg } # Expect allow if **every** StorageBucket resource has an accompanying # StorageBucketAccessControl resource attached to it. test_allow_if_every_bucket_has_access_control { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket2\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket2\" }} , }} , ] count ( deny_storage_bucket_without_access_control ) == 0 with input as cfg } # Expect allow if there is more than one StorageBucketAccessControl policy for # a single bucket test_allow_if_one_bucket_has_many_access_control_policies { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , \"metadata\" : { \"name\" : \"bucket1\" } , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , { \"contents\" : { \"kind\" : \"StorageBucketAccessControl\" , \"spec\" : { \"bucketRef\" : { \"name\" : \"bucket1\" }} , }} , ] count ( deny_storage_bucket_without_access_control ) == 0 with input as cfg }","title":"Test Cases"},{"location":"config_connector/cp_9/sqlinstance/","text":"CP_9 SQLInstance Description To comply with [CP-9 Informaton System Backup], all SQLInstance resources must have spec.settings.backupConfiguration.enabled set to true . Rego Policy 1 2 3 4 5 6 7 8 9 10 11 12 13 package config_connector.cp_9.sqlinstance deny_sqlinstance_backup_disabled [ msg ] { # There exists some `i` some i # Such that the `i`th resource is a SQLInstance manifest input [ i ] .contents.kind == \"SQLInstance\" # And it is not the case that its backup configuration is enabled not input [ i ] .contents.spec.settings.backupConfiguration.enabled == true # Error message with remediation msg = \"Backup is disabled. Remediation: set `spec.settings.backupConfiguration.enabled: true`\" } Test Cases 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package config_connector.cp_9.sqlinstance # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if there are multiple SQLInstance resources present, and at least # one of them has backupConfiguration disabled. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : false }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # Expect deny if there are multiple SQLInstance resources present, and at least # one of them does not specify the full path to backupConfiguration. test_deny_if_any_sqlinstance_has_path_to_backup_unspecified { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : {}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if a non-SQLInstance resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , }} , { \"contents\" : { \"kind\" : \"Notebook\" , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg } # Expect allow if **every** SQLInstance resource has backupConfiguration enabled. test_allow_if_every_sqlinstance_has_backup_enabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg }","title":"SQLInstance"},{"location":"config_connector/cp_9/sqlinstance/#cp_9-sqlinstance","text":"","title":"CP_9 SQLInstance"},{"location":"config_connector/cp_9/sqlinstance/#description","text":"To comply with [CP-9 Informaton System Backup], all SQLInstance resources must have spec.settings.backupConfiguration.enabled set to true .","title":"Description"},{"location":"config_connector/cp_9/sqlinstance/#rego-policy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 package config_connector.cp_9.sqlinstance deny_sqlinstance_backup_disabled [ msg ] { # There exists some `i` some i # Such that the `i`th resource is a SQLInstance manifest input [ i ] .contents.kind == \"SQLInstance\" # And it is not the case that its backup configuration is enabled not input [ i ] .contents.spec.settings.backupConfiguration.enabled == true # Error message with remediation msg = \"Backup is disabled. Remediation: set `spec.settings.backupConfiguration.enabled: true`\" }","title":"Rego Policy"},{"location":"config_connector/cp_9/sqlinstance/#test-cases","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package config_connector.cp_9.sqlinstance # _ _ _ # | |_ ___ ___| |_ __| | ___ _ __ _ _ # | __/ _ \\/ __| __| / _` |/ _ \\ '_ \\| | | | # | || __/\\__ \\ |_ | (_| | __/ | | | |_| | # \\__\\___||___/\\__| \\__,_|\\___|_| |_|\\__, | # |___/ # Expect deny if there are multiple SQLInstance resources present, and at least # one of them has backupConfiguration disabled. test_deny_if_any_sqlinstance_has_backup_disabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : false }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # Expect deny if there are multiple SQLInstance resources present, and at least # one of them does not specify the full path to backupConfiguration. test_deny_if_any_sqlinstance_has_path_to_backup_unspecified { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : {}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) > 0 with input as cfg } # _ _ _ _ # | |_ ___ ___| |_ __ _| | | _____ __ # | __/ _ \\/ __| __| / _` | | |/ _ \\ \\ /\\ / / # | || __/\\__ \\ |_ | (_| | | | (_) \\ V V / # \\__\\___||___/\\__| \\__,_|_|_|\\___/ \\_/\\_/ # Expect allow if a non-SQLInstance resource is passed. test_allow_if_resource_kind_is_not_sqlinstance { cfg : = [ { \"contents\" : { \"kind\" : \"StorageBucket\" , }} , { \"contents\" : { \"kind\" : \"Notebook\" , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg } # Expect allow if **every** SQLInstance resource has backupConfiguration enabled. test_allow_if_every_sqlinstance_has_backup_enabled { cfg : = [ { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , { \"contents\" : { \"kind\" : \"SQLInstance\" , \"spec\" : { \"settings\" : { \"backupConfiguration\" : { \"enabled\" : true }}} , }} , ] count ( deny_sqlinstance_backup_disabled ) == 0 with input as cfg }","title":"Test Cases"}]}